- packaging: 

  - uninstall

- known bugs or poorly designed features:

  - inner loop in image_paste could be optimized by replacing the if
    on the index with a calculation to begin and end loops at
    appropriate indices...

  - DOCUMENT THIS: network init ops may set spread. if spread is set,
    run_spread op is added and the spread is performed. other network
    operate ops are run prior to spreading (threaded spread overrides
    the default run spread - see network_load)

  - mint_weights_set assumes indices in sparse matrix cind variables
    are sorted, but mint_weights_set_row does not check...

  - lateral processing weights op can be turned into receptive field
    op by allowing nfrom to be different from nto!
   
- to be tested:

  - freezing/unfreezing of weight matrices and networks
  - multi-threaded spread

-mint_pi:

  - test sensor functions

- threads:

  - in weights_mult_threads, would it be noticeably faster to send all
    work to nthread slaves and leave the master thread only as
    monitor?

  - multithread mint_nodes_set?

  - multi thread mint_node update: could be done in the network rather
    than in the nodes, given that node updates already take a range of
    nodes, and given that the diversity of node updates prevents the
    approach used for weights.

  - spread threading is suboptimal, see FIX in threads.c

  - multithreading of node operations: write auxiliary function that
    either simply dispatches the node op or schedules it across
    multiple threads then an init op could se this to the threaded
    version.

- ops system:

  - make matrix target an op

  - can direct-output nodes be set through an op? yes: by setting n[1]
    to the same as n[0]... carefully. is this safe? how to prevent
    memory to be wasted? 

  - more convenient ways to manipulate ops lists? like add op of a
    given type and params by name? also: 

    int mint_nodes_property( mint_nodes n, char *prop, int param, 
                             float *value )

    and mint_weights_property, mint_network_property

- weights init functions that build receptive fields and topographic
  mappings

- can we write a function that efficiently maps node index to x,y
  position on a grid? 

- make it possible to set inputs by "shallow copy" (pointer
  assignment)? would make things much faster when presenting many
  different stimuli repeatedly, especially large stimuli like
  realistic images.


- sense organs   

  - human cone system (cone data in egs-devel/physiology)

  - generic rearrangement-intensity scheme

mint_nodes mint_2d_stim( int size, float x, float h, float d ) {
  int i;
  mint_nodes n;
  float aux;
  n = mint_nodes_new( size, 0 );
  for( i=0; i<size; i++ ) {
    aux = (i-x)/d;
    n[1][i] += h * exp( -aux*aux );
  }
  return n;
}


- worth it? 

  - grow/shrink node arrays and weight matrices (cf. nodes_resize)
    MEDIUM

  - population and mutation for genetic algorithms MEDIUM

  - dynamic network visualization MEDIUM

  - virtual environment COMPLEX


- minor tweaks:
  
  - when resize is done for nodes, rename it to mint_nodes_set_size,
    and rename mint_nodes_size to mint_nodes_get_size, for consistency
    with other objects


- improve error management: 

  - specify also num states for from and to in weight update rules?

- examples:

  - make sure all examples work, have same file layout, and have a
    README.txt file


- MPI: 

  - think about it!
