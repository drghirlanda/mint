# list of c files 
FILES="netop network nodes nop op random random_search spread string 
threads utils weights wop pi"

# list of dependencies of the libmint task (updated in several places)
DEPS=""

# installation directory
INSTALL=${install:="/usr/local/"}

# test whether a given feature is compiled in a libmint*.a file
hasfeature() {
    case $2 in
	"threads")
	    feature=pthread;;
	"image")
	    feature="SDL_Init";;
	"pi")
	    feature="mint_pi";;
	"camera")
	    feature="mint_camera_init"
    esac
    N=$(nm -a $1 | grep $feature | wc -l)
    [[ $N -gt 0 ]]
}

# figure out additional libraries required to link a program with a
# given libmint*.a
getlibs() {
    LIBS=""
    if hasfeature $1 "threads"; then
	LIBS="$LIBS -pthread"
    fi
    if hasfeature $1 "image"; then
	SDLLIBS=$(sdl-config --libs)
	LIBS="$LIBS $SDLLIBS -lSDL_image -lSDL_gfx -lSDL_ttf"
    fi
    if hasfeature $1 "pi"; then
	LIBS="$LIBS -lpigpio -lrt -pthread"
    fi
    echo $LIBS
}

# set CFLAGS according to production, debug, or profile mode
CFLAGS="-ansi -Wall -Wextra -Werror"
if [[ $debug -eq 1 ]]; then
    LIBRARY=libmint-debug.a
    CFLAGS="-g -O0 $CFLAGS"
    BUILD=build/debug
elif [[ $profile -eq 1 ]]; then
    LIBRARY=libmint-profile.a
    CFLAGS="-O2 -funroll-loops -finline-functions -pg $CFLAGS"
    BUILD=build/profile
else
    LIBRARY=libmint.a
    CFLAGS="-O2 -funroll-loops -finline-functions -fomit-frame-pointer $CFLAGS"
    BUILD=build/production
fi

# process mint features and give some feedback to user. the camera and
# threads features need some additional work which is handled by the
# case statement. note that camera is processed before image by the
# for loop, so it can enable image, which it needs.
for FEATURE in camera image threads pi; do 
    VARIABLE=${!FEATURE}
    if [[ $VARIABLE -eq 1 ]]; then
	BUILD="${BUILD}1"
	case $FEATURE in
	    "camera")
		CFLAGS="$CFLAGS -DCAMSHOT=\"$INSTALL/bin/camshot\""
		DEPS="$DEPS camshot"
		FILES="$FILES camera"
		image=1 # enable image here
		;;
	    "image")
		CFLAGS="$CFLAGS -DMINT_DIR=\"$INSTALL\" -DMINT_IMAGE"
		FILES="$FILES image"
		;;
	    "threads")
		CFLAGS="$CFLAGS -DMINT_USE_THREADS"
		FILES="$FILES threads"
		;;
	    "pi")
		CFLAGS="$CFLAGS -DMINT_PI"
		## NOTE: pi is always in FILES to enable testing of
		## Raspberry Pi code on non-Pi machines
		;;
	esac
    else
	BUILD="${BUILD}0"
	# delete the object file from library (threads feature
	# requires more work)
	if [ $FEATURE != "threads" ]; then
	    ar d $LIBRARY $FEATURE.o
	fi
    fi
done

echo -e "compilation options:\n$CFLAGS"

# make sure build directory exists
mkdir -p $BUILD

# yruba rules from now on ##############################################

# compile a generic C file
mapTarget '*.o' compileC

dep_compileC() {
    local C=src/$(basename $1 .o).c
    echo $C
}

test_compileC() {
    old $1 -d $2
}

cmd_compileC() {
    local C=src/$(basename $1 .o).c
    cc $CFLAGS -o $1 -c $C
}


# build mint library

dep_mint() {
    for F in $FILES; do
	DEPS="$DEPS $BUILD/$F.o"
    done
    echo $DEPS
}

test_mint() {
    old $1 -d $2
}

cmd_mint() {
    for F in $FILES; do
	ar crs $LIBRARY $BUILD/$F.o
    done 
    if hasfeature $LIBRARY "camera"; then
	ar crs $LIBRARY camshot/shmem.o
    fi
    if [[ $LIBRARY == "libmint.a" ]]; then
    	strip --strip-unneeded $LIBRARY
    fi
}


# install mint

dep_install() {
    D=$LIBRARY
    if hasfeature $LIBRARY "image"; then
	D="$D camshot"
    fi
    echo $D
}

cmd_install() {
    install -d "$INSTALL/lib"
    install -m 0644 libmint*.a "$INSTALL/lib"
    /bin/rm -f "$INSTALL/include/mint.h"
    install -d "$INSTALL/include/mint"
    for F in $FILES; do 
	install -m 0644 src/$F.h "$INSTALL/include/mint"
	echo "#include \"mint/$F.h\"" >> "$INSTALL/include/mint.h" 
    done
    if hasfeature $LIBRARY "image"; then
	install camshot/camshot "$INSTALL/bin"
	install FreeSans.ttf "$INSTALL/include/mint"
    fi
}


# remove all build and library files

cmd_clean() {
    /bin/rm -rf ./libmint* build/*
}


# create a mint distribution

dep_package() {
    echo "doc"
}

test_package() {
    old $1 -d $2
}

cmd_package() {
    PKG=mint-$(date -I)
    /bin/rm -f $PKG.zip
    mkdir -p $PKG/src
    mkdir -p $PKG/doc/manual 
    cp -r README yruba yrules camshot install.sh $PKG
    cp -r src/*.h src/*.c $PKG/src
    cp doc/manual/mint.pdf $PKG/doc/manual
    cp -r doc/html $PKG
    find example -type d -exec mkdir -p $PKG/{} \;
    for SFX in c arc R sh; do
	for F in $(find example -name '*.'$SFX); do
	    cp $F $PKG/$(dirname $F)
	done
    done
    zip -r $PKG.zip $PKG
    /bin/rm -rf $PKG
}


# build docs

#dep_doc() {
#    echo "src/*.h doc/manual/mint.tex"
#}

#test_doc() {
#    old $1 -d $2
#}

cmd_doc() {
    cd doc/manual
    for i in 1 2 3; do
	pdflatex mint.tex
    done
    cd -
    doxygen doc/Doxyfile
}


# build camshot

test_camshot() {
    ! make -q -C camshot
}

cmd_camshot() {
    cd camshot
    make clean
    make
    cd -
}


# build examples: ######################################################

mapTarget 'example/*' compileEx

dep_compileEx() {
    echo mint
}

cmd_compileEx() {
    E=$(basename $1)
    local C=example/$E/$E.c
    LIBS=$(getlibs $LIBRARY)
    echo $LIBS
    cc $CFLAGS -o example/$E/$E $C -Isrc $LIBRARY -lm $LIBS
}

dep_example() {
    EXDEPS=$LIBRARY
    for F in $EXAMPLES; do
	EXDEPS="$EXDEPS example/$F"
    done
    echo $EXDEPS
}

cmd_example() {
    echo "examples built"
}

# build all examples

# documentation strings: ###############################################

ydoc mint "build libmint (see README for optional features)"
ydoc package "build tgz distribution archive"
ydoc doc     "build MINT documentation"
